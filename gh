#!/usr/bin/env perl
# -*- mode: cperl -*-
package gh;

use strict;
use autodie;
use warnings;
use File::Copy;
use File::Path;
use Data::Dumper;
use Getopt::Long;
use File::Compare;
use Term::ANSIColor;

our %cfg;
our @users;
our $current_user;

sub pr {
    print colored ['green'], '~';
    print shift, "\n";
}

sub err {
    print colored ['red'], '~err: ';
    print shift, "\n";
}

load_config();

if ( $#ARGV == -1) {
    list_users();
    exit;
}

# check first arg and match accordingly
my $cmd = shift @ARGV;

if ( $cmd ~~ /^add$/ ) {
    my $name;
    my $email;
    my $key;

    my $result = GetOptions(
        "n|name=s"  => \$name,
        "e|email=s" => \$email,
        "k|key=s"   => \$key
    );

    usage() if $#ARGV < 0;

    my $username = shift @ARGV;

    add_user( $username, $name, $email, $key );
}
elsif ( $cmd ~~ /^(remove|rm)$/ ) {
    remove_user(@ARGV);
}
elsif ( $cmd ~~ /^l(ist)?$/ ) {
    list_users();
    exit;
}
elsif ( $cmd ~~ /^who$/ ) {
    pr "$current_user" if $current_user;
    exit;
}
elsif ( $cmd ~~ /^restore$/ ) {
    restore_files();
}
else {
    usage() if $#ARGV > -1;

    switch_user($cmd);    # if theres one arg, we assume its $user
}

save_config();

sub add_user {
    my ( $user, $name, $email, $key ) = @_;

    usage() if not $name or not $email or not $key;

    if ( not -e $key ) {
          err "$key dont exist.";
        exit;
    }

    # backup their key
    my $backup_dir = "$ENV{HOME}/.gh/b";
    mkpath $backup_dir unless -d $backup_dir;
    copy $key, "$backup_dir/$user";

    $cfg{users}{$user} = {
        name  => "$name",
        email => "$email",
        key   => "$key",
    };

    switch_user($user) if scalar @users == 0;

    pr "added $user";
}

sub remove_user {
    my $user = shift;

    if ( r_u_sure() ) {
        delete $cfg{users}{$user};
        pr "bye";
    }
}

sub list_users {
    for (@users) {
        if ( $_ eq $current_user ) {
            pr "$_";
        }
        else {
            print " $_\n";
        }
    }
}

sub switch_user {
    my $name = shift;
    if ( not $name ~~ @users ) {
          err "$name dont exist.\n";
        exit;
    }

    # update gitconfig settings
    update_gitconfig($name);

    # cp selected user's key to ~/.ssh/id_rsa
    # this might be a really bad idea but whatev
    my $key = get_key($name);
    copy $key, "$ENV{HOME}/.ssh/id_rsa";

    # try and kill ssh-agent;
    system "killall ssh-agent &> /dev/null";

    $cfg{current} = $name;
    pr "$name";
}

sub r_u_sure {
    print colored ['green'], "~";
    print "r u sure?: ";
    chomp( my $input = <STDIN> );

    return $input ~~ /^y(es)?$/;
}

sub update_gitconfig {
    my $user  = shift;
    my $name  = $cfg{users}{$user}{name};
    my $email = $cfg{users}{$user}{email};

    # TODO: edit actual config instead of system calls
    system "git config --global user.name \"$name\"";
    system "git config --global user.email \"$email\"";
}

sub get_key {
    my $user       = shift;
    my $backup_dir = "$ENV{HOME}/.gh/b";

    return "$backup_dir/$user";
}

sub load_config {
    my $loc = "$ENV{HOME}/.gh/config";
    return if not -e $loc;

    open my $file, '<', $loc
      or die("~err: couldnt open config.");

    local $/;
    my $str = <$file>;
    eval $str;

    @users        = sort keys $cfg{users};
    $current_user = $cfg{current};
}

sub save_config {
    my $loc = "$ENV{HOME}/.gh";

    mkpath $loc unless -d $loc;

    open my $file, '>', "$loc/config"
      or die("~err: couldnt save config.");

    $Data::Dumper::Indent = 1;
    print $file Data::Dumper->Dump( [ \%cfg ], ['*cfg'] );
    close $file;
}

sub restore_files {
    return if not r_u_sure();

    my $backup_dir = "$ENV{HOME}/.gh/b";

    for my $user ( keys $cfg{users} ) {
        my $backup   = "$backup_dir/$user";
        my $filename = $cfg{users}{$user}{key};

        if ( not compare( $backup, $filename ) == 0 ) {
            copy( $backup, $filename );
            pr "restored $filename";
        }
    }
}

sub usage {
    print colored ['red'], '~';
    print <<EOF;
ur doin it rong.
EOF

    exit;
}

__END__

=head1 NAME

gh - manage multiple github accts

=head1 USEAGE

  > gh add bsdf --name "BEN ENGLISCH" --email "EMAILBEN145@gmail.com" --key ~/.ssh/id_rsa
    ~added bsdf

  > gh add bsdf2 -n "JEN ENGLISCH" -e "EMAILJEN145@gmail.com" -k ~/.ssh/id_rsa2
    ~added bsdf2

  > gh list
  > gh l
  > gh
    ~bsdf
     bsdf2

  > gh bsdf2
    ~bsdf2

  > gh who
    ~bsdf2

  > gh list
     bsdf
    ~bsdf2

  > gh bsdf3
    ~err: bsdf3 doesnt exist.

  > gh remove bsdf2
  > gh rm bsdf2
    ~r u sure? y
    ~bye

  > gh restore
    ~restored ~/.ssh/id_rsa
    ~restored ~/.ssh/id_rsa2

=cut
