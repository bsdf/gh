#!/usr/bin/env perl
# -*- mode: cperl -*-

use strict;
use autodie;
use warnings;
use File::Copy;
use File::Path;
use Data::Dumper;
use Term::ANSIColor;

usage() if $#ARGV == -1;

our %cfg;
our @users;
our $current_user;

sub pr {
    print colored ['green'], '~';
    print shift, "\n";
}

sub err {
    print colored ['red'], '~err: ';
    print shift, "\n";
}

load_config();

# check first arg and match accordingly
my $cmd = shift @ARGV;

if ( $cmd ~~ /^add$/ ) {
    usage() if $#ARGV < 1;

    add_user(@ARGV);
}
elsif ( $cmd ~~ /^(remove|rm)$/ ) {
    remove_user(@ARGV);
}
elsif ( $cmd ~~ /^l(ist)?$/ ) {
    list_users();
    exit;
}
elsif ( $cmd ~~ /^who$/ ) {
    pr "$current_user" if $current_user;
    exit;
}
elsif ( $cmd ~~ /^restore$/ ) {
    restore_files();
}
else {
    usage() if $#ARGV > -1;

    switch_user($cmd);    # if theres one arg, we assume its $user
}

save_config();

sub add_user {
    my ( $user, $key ) = @_;
    if ( not -e $key ) {
        err "$key dont exist.";
        exit;
    }

    # backup their key
    my $backup_dir = "$ENV{HOME}/.gh/b";
    mkpath $backup_dir unless -d $backup_dir;
    copy $key, "$backup_dir/$user";

    $cfg{users}{$user} = $key;
    $cfg{current} = $user if scalar @users == 0;

    pr "added $user";
}

sub remove_user {
    my $user = shift;

    if ( r_u_sure() ) {
        delete $cfg{users}{$user};
        pr "bye";
    }
}

sub list_users {
    for (@users) {
        if ( $_ eq $current_user ) {
            pr "$_";
        }
        else {
            print " $_\n";
        }
    }
}

sub switch_user {
    my $name = shift;
    if ( not $name ~~ @users ) {
        err "$name dont exist.\n";
        exit;
    }

    # cp selected user's key to ~/.ssh/id_rsa
    # this might be a really bad idea but whatev
    my $key = get_key($name);
    copy $key, "$ENV{HOME}/.ssh/id_rsa";

    # try and kill ssh-agent;
    system "killall ssh-agent &> /dev/null";

    $cfg{current} = $name;
    pr "$name";
}

sub r_u_sure {
    print colored ['green'], "~";
    print "r u sure?: ";
    chomp( my $input = <STDIN> );

    return $input ~~ /^y(es)?$/;
}

sub get_key {
    my $user = shift;
    my $backup_dir = "$ENV{HOME}/.gh/b";

    return "$backup_dir/$user";
}

sub load_config {
    my $loc = "$ENV{HOME}/.gh/config";
    return if not -e $loc;

    open my $file, '<', $loc
      or die("~err: couldnt open config.");

    local $/;
    my $str = <$file>;
    eval $str;

    @users        = sort keys $cfg{users};
    $current_user = $cfg{current};
}

sub save_config {
    my $loc = "$ENV{HOME}/.gh";

    mkpath $loc unless -d $loc;

    open my $file, '>', "$loc/config"
      or die("~err: couldnt save config.");

    $Data::Dumper::Indent = 1;
    print $file Data::Dumper->Dump( [ \%cfg ], ['*cfg'] );
    close $file;
}

sub restore_files {
    my $backup_dir = "$ENV{HOME}/.gh/b";
}

sub usage {
    print colored ['red'], '~';
    print <<EOF;
ur doin it rong.
EOF

    exit;
}

__END__

=head1 NAME

gh - manage multiple github accts

=head1 USEAGE

  > gh add bsdf ~/.ssh/id_rsa
    ~added bsdf

  > gh add bsdf2 ~/.ssh/id_rsa2
    ~added bsdf2

  > gh add bsdf3 ffff.txt
    ~err: key doesnt exist.

  > gh list
    ~bsdf
     bsdf2

  > gh bsdf2
    ~bsdf2

  > gh who
    ~bsdf2

  > gh list
     bsdf
    ~bsdf2

  > gh bsdf3
    ~err: bsdf3 doesnt exist.

  > gh remove bsdf2
       or
  > gh rm bsdf2
    ~r u sure? y
    ~bye

  > gh restore
    ~keys restored

=cut
